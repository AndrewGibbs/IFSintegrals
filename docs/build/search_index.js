var documenterSearchIndex = {"docs":
[{"location":"SIOs/","page":"Integral equations","title":"Integral equations","text":"SIO","category":"page"},{"location":"SIOs/#IFSintegrals.SIO","page":"Integral equations","title":"IFSintegrals.SIO","text":"SIO is the type for singular integral operators.\n\n\n\n\n\n","category":"type"},{"location":"SIOs/","page":"Integral equations","title":"Integral equations","text":"DiscreteSIO","category":"page"},{"location":"SIOs/#IFSintegrals.DiscreteSIO","page":"Integral equations","title":"IFSintegrals.DiscreteSIO","text":"DiscreteSIO(SIO::SIO; h_mesh::Real, h_quad::Real, h_quad_diag::Real)\n\nis the constructor for a discretisation of a singular integral operator, 'SIO'. hmesh is the meshwidth parameter for the discretisation of the underlying fractal hquad denotes the discretisation parameter for the integrals in the stiffness matrix. hquaddiag is the parameter used to compute the diagonal elements of the matrix\n\n\n\n\n\n","category":"type"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"plot","category":"page"},{"location":"#IFSintegrals","page":"Home","title":"IFSintegrals","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation explains basic usage of the Julia package IFSintegrals. This package is designed to approximate integrals and solve integral equations on fractals.","category":"page"},{"location":"","page":"Home","title":"Home","text":"There is no generally accepted definition of the word fractal. Here we consider self-similar sets, which can be described as the attractor of an iterated function system, consisting of a set of affine contraction maps.","category":"page"},{"location":"#Installation:","page":"Home","title":"Installation:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install, type the following into Julia:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg.add(\"https://github.com/AndrewGibbs/IFSintegrals.git\")","category":"page"},{"location":"quadrature/","page":"Approximating integrals","title":"Approximating integrals","text":"barycentre_rule","category":"page"},{"location":"quadrature/#IFSintegrals.barycentre_rule","page":"Approximating integrals","title":"IFSintegrals.barycentre_rule","text":"x,w = barycentre_rule(Γ::Union{InvariantMeasure,SubInvariantMeasure},h::Real)\n\nreturns a vector of N weights wⱼ>0 and nodes xⱼ ∈ Rⁿ, for approximation of integrals defined on an IFS Γ⊂Rⁿ.\n\n\n\n\n\nx,y,w = barycentre_rule(Γ₁::Union{InvariantMeasure,SubInvariantMeasure},Γ₂::Union{InvariantMeasure,SubInvariantMeasure},h::Real)\n\nreturns N weights wⱼ>0 and nodes x,y ∈ Rⁿ, for approximation of double integrals over Γ₁,Γ₂⊂Rⁿ. Uses Barycentre rule quadrature, the fractal Γ will be subdivided until each subcomponent has a diameter of less than h.\n\n\n\n\n\n","category":"function"},{"location":"quadrature/","page":"Approximating integrals","title":"Approximating integrals","text":"gauss_quad","category":"page"},{"location":"quadrature/#IFSintegrals.gauss_quad","page":"Approximating integrals","title":"IFSintegrals.gauss_quad","text":"x,w = gauss_quad(Γ::SelfSimilarFractal{V,M}, N::Int64) where {V<:Real, M<:Real}\n\nReturns N Gaussian weights w ∈ Rᴺ and nodes x ∈ Rᴺˣᴺ. Here Γ must be an SelfSimilarFractal in one spatial dimension. N is the order of the Gauss rule, i.e. number of weights and nodes.\n\n\n\n\n\n","category":"function"},{"location":"quadrature/","page":"Approximating integrals","title":"Approximating integrals","text":"chaos_game","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"An iterated function system is a set of M affine contraction maps, or similarities.","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"Each similarity is of the form:","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"s_m(x)=r_mA_mx + delta_mquad xinmathbbR^n","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"where r_min(01) is the contraction factor, A_minR^ntimes n is a rotation matrix, and deltainR^n is a translation vector.","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"Similarity","category":"page"},{"location":"makeIFS/#IFSintegrals.Similarity","page":"Constructing fractals","title":"IFSintegrals.Similarity","text":"struct Similarity{V<:Union{Real,AbstractVector}, M<:Union{Real,AbstractMatrix}}\n    r::Float64 # contraction\n    δ::V # translation\n    A::M # rotation\n    rA::M # contraction * rotation\nend\n\nConstructs a similarity map.  The third input (rotation matrix) is optional, and the fourth is created automatically.\n\nCan be treated as a function, for example\n\n    julia> s = Similarity(1/2,0) # creates contraction s(x)=x/2+0\n    julia> s(π)\n    1.5707963267948966\n\n\n\n\n\n","category":"type"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"The iterated function system may be interpreted as a set of these maps, s_m_m=1^M. The attractor Gamma is the unique non-empty compact set which satisfies $ \\Gamma = \\bigcup{m=1}^M sm(\\Gamma). $","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"The attractor Gamma will be the support of our measure. There are other properties, such as diameter and Hausdorff dimension, which describe this type.","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"SelfSimilarMeasure","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"SelfSimilarSubMeasure","category":"page"}]
}
