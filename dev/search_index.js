var documenterSearchIndex = {"docs":
[{"location":"SIOs/","page":"Integral equations","title":"Integral equations","text":"SIO","category":"page"},{"location":"SIOs/#IFSintegrals.SIO","page":"Integral equations","title":"IFSintegrals.SIO","text":"SIO is the type for singular integral operators.\n\n\n\n\n\n","category":"type"},{"location":"SIOs/","page":"Integral equations","title":"Integral equations","text":"DiscreteSIO","category":"page"},{"location":"SIOs/#IFSintegrals.DiscreteSIO","page":"Integral equations","title":"IFSintegrals.DiscreteSIO","text":"DiscreteSIO(SIO::SIO; h_mesh::Real, h_quad::Real, h_quad_diag::Real)\n\nis the constructor for a discretisation of a singular integral operator, 'SIO'. hmesh is the meshwidth parameter for the discretisation of the underlying fractal hquad denotes the discretisation parameter for the integrals in the stiffness matrix. hquaddiag is the parameter used to compute the diagonal elements of the matrix\n\n\n\n\n\n","category":"type"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"plot","category":"page"},{"location":"#IFSintegrals","page":"Home","title":"IFSintegrals","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation explains basic usage of the Julia package IFSintegrals. This package is designed to approximate integrals and solve integral equations on fractals.","category":"page"},{"location":"","page":"Home","title":"Home","text":"There is no generally accepted definition of the word fractal. Here we consider self-similar sets, which can be described as the attractor of an iterated function system, consisting of a set of affine contraction maps.","category":"page"},{"location":"quadrature/","page":"Approximating integrals","title":"Approximating integrals","text":"barycentre_rule\ngauss_quad\nchaos_quad","category":"page"},{"location":"quadrature/#IFSintegrals.barycentre_rule","page":"Approximating integrals","title":"IFSintegrals.barycentre_rule","text":"x,w = barycentre_rule(Γ::Union{InvariantMeasure,SubInvariantMeasure},h::Real)\n\nreturns a vector of N weights wⱼ>0 and nodes xⱼ ∈ Rⁿ, for approximation of integrals defined on an IFS Γ⊂Rⁿ.\n\n\n\n\n\nx,y,w = barycentre_rule(Γ₁::Union{InvariantMeasure,SubInvariantMeasure},Γ₂::Union{InvariantMeasure,SubInvariantMeasure},h::Real)\n\nreturns N weights wⱼ>0 and nodes x,y ∈ Rⁿ, for approximation of double integrals over Γ₁,Γ₂⊂Rⁿ. Uses Barycentre rule quadrature, the fractal Γ will be subdivided until each subcomponent has a diameter of less than h.\n\n\n\n\n\n","category":"function"},{"location":"quadrature/#IFSintegrals.gauss_quad","page":"Approximating integrals","title":"IFSintegrals.gauss_quad","text":"x,w = gauss_quad(Γ::SelfSimilarFractal{V,M}, N::Int64) where {V<:Real, M<:Real}\n\nReturns N Gaussian weights w ∈ Rᴺ and nodes x ∈ Rᴺˣᴺ. Here Γ must be an SelfSimilarFractal in one spatial dimension. N is the order of the Gauss rule, i.e. number of weights and nodes.\n\n\n\n\n\n","category":"function"},{"location":"quadrature/#IFSintegrals.chaos_quad","page":"Approximating integrals","title":"IFSintegrals.chaos_quad","text":"chaos_quad(Γ::SelfSimilarFractal{V,M},N::Int64;x₀=Γ.barycentre:::AbstractVector) where {V<:AbstractVector, M<:Union{Real,AbstractMatrix}}\n\nReturns a vector of N weights w>0 and nodes x ∈ Rⁿ, for approximation of integrals defined on an IFS Γ⊂Rⁿ. Using Chaos game quadrature. Optional third input is the initial guess, which is taken as barycentre by default.\n\n\n\n\n\n","category":"function"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"using IFSintegrals\nusing Plots","category":"page"},{"location":"makeIFS/#Constructing-Fractals-and-Fractal-measures","page":"Constructing fractals","title":"Constructing Fractals and Fractal measures","text":"","category":"section"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"An iterated function system is a set of M affine contraction maps, or similarities.","category":"page"},{"location":"makeIFS/#Similarities","page":"Constructing fractals","title":"Similarities","text":"","category":"section"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"Each similarity is of the form:","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"s_m(x)=r_mA_mx + delta_mquad xinmathbbR^n","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"where r_min(01) is the contraction factor, A_minR^ntimes n is a rotation matrix, and deltainR^n is a translation vector.","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"Similarity","category":"page"},{"location":"makeIFS/#IFSintegrals.Similarity","page":"Constructing fractals","title":"IFSintegrals.Similarity","text":"struct Similarity{V<:Union{Real,AbstractVector}, M<:Union{Real,AbstractMatrix}}\n    r::Float64 # contraction\n    δ::V # translation\n    A::M # rotation/reflection\n    rA::M # contraction * rotation/reflection\nend\n\nConstructs a similarity map.  The third input (rotation matrix) is optional, and the fourth is created automatically.\n\nCan be treated as a function, for example\n\n    julia> s = Similarity(1/2,0) # creates contraction s(x)=x/2+0\n    julia> s(π)\n    1.5707963267948966\n\n\n\n\n\n","category":"type"},{"location":"makeIFS/#InvariantMeasure","page":"Constructing fractals","title":"InvariantMeasure","text":"","category":"section"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"The iterated function system may be interpreted as a set of these maps, s_m_m=1^M. The attractor Gamma is the unique non-empty compact set which satisfies","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"Gamma = S(Gamma)=bigcup_m=1^M s_m(Gamma)","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"We can construct the map S defined above as follows.","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"using IFSintegrals\ns₁ = Similarity(1/3,2/3)\ns₂ = Similarity(1/3,2/3)\nS = [s₁,s₂]\nx = rand()\nS(x) # applies the map S to the point x","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"This is the IFS for the Cantor Set, and this can be converted into an InvariantMeasure with the command","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":" Γ = InvariantMeasure(S)","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"The outer constructor for InvariantMeasure constructs other properties, such as diameter and Hausdorff dimension, which describe this fractal measure.","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"Now let's try a more complicated example. The second (translation) argument of Similarity can also be a vector. For example:","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"ρ = 0.41\nIFS = [\n    Similarity(ρ,[0,0])\n    Similarity(ρ,[1-ρ,0])\n    Similarity(ρ,[(1-ρ)/2,sqrt(3)*(1-ρ)/2])\n    Similarity(ρ,[(1-ρ)/2,(1-ρ)/(2*sqrt(3))])\n    ]\n Γ = InvariantMeasure(IFS)\n nothing #hide","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"We can plot an approximation attractors in mathbbR or mathbbR^2, as follows:","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"using Plots\nplot(Γ,color = \"black\", markersize=0.75,label=\"My fractal\")","category":"page"},{"location":"makeIFS/#Preset-fractals","page":"Constructing fractals","title":"Preset fractals","text":"","category":"section"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"Several preset fractals are available. These may be called with:","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"CantorSet()\nCantorDust()\nSierpinski() # triangle/gasket\nKochCurve() # Koch curve\nKochFlake() # Koch snowflake\nVicsek() # Vicsek fractal\nSquareFlake() # Minkowski snowflake\nCarpet() # Sierpinski carpet\nDragon() # Heighway Dragon","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"Some of these presets have optional arguments, for example CantorSet and CantorDust have the default contraction=1/3, but this can be set to any value in (012.","category":"page"},{"location":"makeIFS/#Manipulating-fractals","page":"Constructing fractals","title":"Manipulating fractals","text":"","category":"section"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"Fractals can be translated, stretched and rotated very easily, using simple arithmetic syntax. For example,","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"Γ = Sierpinski()\nplot(Γ, markersize=0.75,\n    label=\"Sierpinski Triangle (default)\")\n\nΓ_shift = 1.5*Γ + [-2,0.5]\nplot!(Γ_shift, markersize=0.75, \n    label=\"Sierpinski Triangle (translated and stretched)\",aspect_ratio=1.0)\n","category":"page"},{"location":"makeIFS/#SubInvariantMeasure","page":"Constructing fractals","title":"SubInvariantMeasure","text":"","category":"section"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"Consider an IFS with MinmathbbN components. For a vector","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"mathbfm=m_1ldotsm_Nin1ldotsM^N","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"it is standard to denote a sub-component of the fractal by","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"Gamma_mathbfm = s_m_1circldots circ s_m_N(Gamma)","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"The following type also describes a measure whose support is a sub-component, in the above sense.","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"SubInvariantMeasure","category":"page"},{"location":"makeIFS/#IFSintegrals.SubInvariantMeasure","page":"Constructing fractals","title":"IFSintegrals.SubInvariantMeasure","text":"struct SubInvariantMeasure{V,M} <: SelfSimilarFractal{V,M}\n    parent_measure::InvariantMeasure\n    IFS::Vector{Similarity{V,M}} # could be removed ?\n    index::Vector{Int64}\n    barycentre::V\n    diameter::Float64\n    measure::Float64\nend\n\nRepresents a fractal measure which has been derived from an InvariantMeasure.\n\nFields\n\nparentmeasure: This measure is supported on a subet of the support of parentmeasure\nIFS: The vector of similarities describing the fractal support of this measure\nindex: The vector index corresponding to the contractions applied to parent_measure\nbarycentre: The barycentre of this measure\ndiameter: The diameter of the fractal support\nmeasure: The measure of the support\n\n\n\n\n\n","category":"type"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"Using standard vector index syntax, a SubInvariantMeasure can be easily constructed:","category":"page"},{"location":"makeIFS/","page":"Constructing fractals","title":"Constructing fractals","text":"Γ = Sierpinski()\nm = [1,3,2] # vector index\nΓₘ = Γ[m] # construct SubInvariantMeasure\n\nplot(Γ, markersize=0.75,\n    label=\"Sierpinski Triangle (default)\")\nplot!(Γₘ, markersize=0.75,\n    label=\"Subcomponent\",aspect_ratio=1.0)","category":"page"}]
}
